on:
  workflow_dispatch:
  push:
  create:
  release:
    types: [created]

name: Handle Release
jobs:
  generate-cosmocc:
    needs: generate
    if: "${{ ( github.event_name != 'push' ) || startsWith(github.event.head_commit.message, '[[release]]') }}"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: checkout the repository
        uses: actions/checkout@master

      - name: setup repo
        run: bash ./.github/scripts/setup-repo

      - name: get tag
        id: get-tag
        run: |
          echo "TAG=$(bash .github/scripts/format-tag cosmo)" >> "$GITHUB_OUTPUT"

      - name: setup ape
        run: |
          sudo cp -a superconfigure/cosmopolitan/build/bootstrap/ape.elf /usr/bin/ape
          sudo sh -c "echo ':APE:M::MZqFpD::/usr/bin/ape:' >/proc/sys/fs/binfmt_misc/register"

      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: |
            superconfigure/cosmopolitan/.cosmocc
            superconfigure/cosmopolitan/o
          key: cosmocc-build-artifacts
          restore-keys: |
            cosmocc-build-artifacts

      - name: restore timestamps
        uses: hsfzxjy/git-restore-mtime-action@master
        with:
          working-directory: "superconfigure/cosmopolitan"

      - name: restore build artifacts mtime
        if: steps.cache.outputs.cache-hit == 'true'
        working-directory: superconfigure/cosmopolitan
        run: |
          LAST_HEAD=HEAD
          if -f o/.HEAD; then
            LAST_HEAD=$(echo o/.HEAD)
          fi
          if git merge-base --is-ancestor "$LAST_HEAD" HEAD; then
            while read mtime file; do
              [ -f "$file" ] && touch -d "@$mtime" "$file"
            done < o/.mtimes
          else
            rm o/
          fi

      - name: build cosmo
        run: bash ./.github/scripts/build-cosmo

      - name: save mtimes
        working-directory: superconfigure/cosmopolitan
        run: |
          find o -type f -exec stat -c "%Y %n" {} \; > o/.mtimes
          git rev-parse HEAD > o/.HEAD

      - name: zip
        run: |
          cd superconfigure/cosmopolitan
          find cosmocc -exec touch -d "1970-01-01 00:00+0000" -a -m {} \;
          zip -X --symlinks -r cosmocc.zip cosmocc/

      - uses: actions/cache/save@v4
        with:
          path: |
            superconfigure/cosmopolitan/.cosmocc
            superconfigure/cosmopolitan/o
          key: cosmocc-build-artifacts

      - name: upload binaries to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ steps.get-tag.outputs.TAG }}"
          files: "superconfigure/cosmopolitan/cosmocc.zip"
          fail_on_unmatched_files: true
          prerelease: true

  generate:
    if: "${{ ( github.event_name != 'push' ) || startsWith(github.event.head_commit.message, '[[release]]') }}"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        result: [aarch64-gcc, x86_64-gcc, cli, llvm]
    name: ${{ matrix.result }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: setup repo
        run: bash ./.github/scripts/setup-repo
      - name: Get tag
        id: get-tag
        run: |
          echo "TAG=$(bash .github/scripts/format-tag sc)" >> "$GITHUB_OUTPUT"
          cd ../..
      - name: Check release file exists
        id: check-release-file-exists
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RESULT=false
          if gh release view "${{ steps.get-tag.outputs.TAG }}"; then
            RESULT=`gh release view "${{ steps.get-tag.outputs.TAG }}" --json assets --jq '.assets|map(.name)|any(.=="${{ matrix.result }}.zip")'`
          fi
          echo "RESULT=${RESULT}" > "$GITHUB_OUTPUT"
      - name: support ape bins and SSL things
        if: ${{ steps.check-release-file-exists.outputs.RESULT != 'true' }}
        run: bash ./.github/scripts/setup
      - name: build Cosmo
        run: bash ./.github/scripts/cosmo
        if: ${{ steps.check-release-file-exists.outputs.RESULT != 'true' }}
      - name: build ${{ matrix.result }}
        if: ${{ steps.check-release-file-exists.outputs.RESULT != 'true' }}
        env:
          COLLECTION: ${{ matrix.result }}
        run: bash ./.github/scripts/collectbuild ${{ matrix.result }}
      - name: collect into zip
        if: ${{ steps.check-release-file-exists.outputs.RESULT != 'true' }}
        env:
          ZFILENAME: ${{ matrix.result }}
        run: bash ./.github/scripts/collectzip
      - name: Upload binaries to release
        if: ${{ steps.check-release-file-exists.outputs.RESULT != 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ steps.get-tag.outputs.TAG }}"
          files: "superconfigure/${{ matrix.result }}*.zip"
          fail_on_unmatched_files: true
          prerelease: true
